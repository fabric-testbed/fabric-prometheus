version: '3.1'
# This is the template for creating the docker-compose file for a Fabric Testbed rack's Prometheus monitoring system.
services:
# Prometheus
        prometheus_service:
                # The Prometheus Client
                image: prom/prometheus:v2.23.0
                user: "${UID}:${GID}"
                volumes:
                        # config files
                        - {{ base_install_dir }}/prometheus:/etc/prometheus/
                        # TSDB, WAL, chunks
                        - {{ base_data_dir }}/prometheus:/prometheus
                command:
                        - '--config.file=/etc/prometheus/prometheus_config.yml'
                        - '--storage.tsdb.path=/prometheus'
                        - '--storage.tsdb.max-block-duration=2h'
                        - '--storage.tsdb.min-block-duration=2h'
                        - '--web.enable-lifecycle'
                        - '--web.console.libraries=/usr/share/prometheus/console_libraries'
                        - '--web.console.templates=/usr/share/prometheus/consoles'
                restart: always
                extra_hosts:
                        # Need list of head node + all worker nodes
                        # Setup extra hosts so prometheus can label them.
{% for h in groups[hank_name] %}
                        - '{{ hostvars[h].hostname }}:{{ hostvars[h].ansible_host }}'
{% endfor %}
# Thanos - Sidecar
        thanos-sidecar_service:
                # Exports Prometheus data to remote S3 compatible object store.
                image: quay.io/thanos/thanos:v0.14.0
                volumes:
                        # config files
                        - {{ base_install_dir }}/thanos/config/:/etc/thanos/
                        # Provide access to the promtheus data.
                        - {{ base_data_dir }}/prometheus:/prometheus
                        # Map the head node certs for TLS.
                        - /etc/ssl/certs/{{hank_name}}-hn_fabric-testbed_net.pem:/etc/thanos_certs/hn-cert
                        - /etc/pki/tls/private/{{hank_name}}-hn_fabric-testbed_net.key:/etc/thanos_certs/hn-key
                command:
                        - 'sidecar'
                        #- '--log.level=debug'
                        - '--log.format=json' #logfmt logfmt or json  
                        - '--tsdb.path=/prometheus'
                        - '--prometheus.url=http://prometheus:9090'
                        - '--grpc-address=0.0.0.0:10901'  # Called by Global metrics for most recent data.
                        - '--grpc-server-tls-cert=/etc/thanos_certs/hn-cert'
                        - '--grpc-server-tls-key=/etc/thanos_certs/hn-key'
                        - '--http-address=0.0.0.0:10902'  # Used for status page TODO needed?
                        - '--objstore.config-file=/etc/thanos/object_store_config.yml'
                depends_on:
                        - prometheus_service
                # depends_on and links are used intentionally 
                # causes startup time delay to be enough to contact prometheus 
                # HACK find better way to ensure prometheus is running before starting sidcar
                links:
                        - prometheus_service:prometheus
                ports:
                        # make accessible for global node to query
                        - {{hn_public_ipaddr}}:10901:10901
                restart: always

# Thanos - Querier
        thanos-querier_service:
                image: quay.io/thanos/thanos:v0.14.0
                command:
                        - 'query'
                        #- '--grpc-address=0.0.0.0:10921' # Not needed
                        - '--http-address=0.0.0.0:10922'  # HTTP endpoint for thanos queries. Called by grafana.
                        - '--query.replica-label=replica'
                        - '--grpc-client-tls-secure'   # Make store grpc calls using tls 
                        # TODO remove below comments
                        # if needed - '--grpc-client-tls-ca=  #would be - /etc/ssl/certs/renc-hn_fabric-testbed_net_interm.cer:/etc/nginx/root_CA_cert_plus_intermediates_file
                        # Can't use below since we need valid (not self signed) certs for thanos tls
                        #- '--store=thanos-sidecar_service:10901'  # queries sidecar via grpc
                        #- '--store=thanos-store-gateway_service:10911'  # queries SW3 via grpc to gateway service 
                        - '--store={{hn_public_ipaddr}}:10901'  # queries sidecar via grpc
                        - '--store={{hn_public_ipaddr}}:10911'  # queries S3 via grpc to gateway service 
                depends_on:
                        - thanos-sidecar_service
                        - thanos-store-gateway_service
                restart:
                        always   
# Thanos - Store Gateway
        thanos-store-gateway_service:
                image: quay.io/thanos/thanos:v0.14.0
                volumes:
                        # Config files. Same as for Sidecar
                        - {{ base_install_dir }}/thanos/config/:/etc/thanos/
                        # Map the head node certs for TLS.
                        - /etc/ssl/certs/{{hank_name}}-hn_fabric-testbed_net.pem:/etc/thanos_certs/hn-cert
                        - /etc/pki/tls/private/{{hank_name}}-hn_fabric-testbed_net.key:/etc/thanos_certs/hn-key
                command:
                        - 'store'
                        - '--grpc-address=0.0.0.0:10911'  # called by query to get SW3 data
                        - '--grpc-server-tls-cert=/etc/thanos_certs/hn-cert'
                        - '--grpc-server-tls-key=/etc/thanos_certs/hn-key'
                        - '--http-address=0.0.0.0:10912'  
                        - '--data-dir=/tmp/thanos/store'
                        - '--objstore.config-file=/etc/thanos/object_store_config.yml' # connect to SW3 storage
                ports:
                        # make accessible for query
                        - {{hn_public_ipaddr}}:10911:10911
                restart: always

# Grafana
{% if 'grafana' in fab_components %}
        grafana_service:
                image: grafana/grafana:7.4.3
                user: "${UID}:${GID}"
                depends_on:
                    - prometheus_service
                    - thanos-querier_service
                volumes:
                    # database
                    - {{ base_data_dir }}/grafana:/var/lib/grafana
                    # premade datasources and dashboards
                    - {{ base_install_dir }}/grafana/provisioning/:/etc/grafana/provisioning/
                    # Special configs such as auth, url and smtp settings.
                    - {{ base_install_dir }}/grafana/custom:/etc/grafana/custom/
                env_file:
                    - ./grafana/env_file
                restart: always
{% endif %}

# NGINX
        nginx_service:
                image: nginx:1.19
                ports:
{% if 'grafana' in fab_components %}
                        - {{ ansible_host }}:3000:3000       # for grafana
{% endif %}
                        - {{ ansible_host }}:9090:9090       # for prometheus stats
                        - {{ ansible_host }}:10922:10922     # for thanos stats
                volumes:
                        # Config file for above ports.
                        - {{ base_install_dir }}/nginx/config/nginx.conf:/etc/nginx/nginx.conf
                        # TLS configs snippet.
                        - {{ base_install_dir }}/nginx/config/ssl_snippet.conf:/etc/nginx/ssl_snippet.conf
                        # HTAccess for prom/thanos stats pages.
                        - {{ base_install_dir }}/nginx/config/htpasswd:/etc/nginx/htpasswd
                        # Map the head node ssl certs.
                        - /etc/ssl/certs/{{hank_name}}-hn_fabric-testbed_net.pem:/etc/nginx/cert_file
                        - /etc/ssl/certs/{{hank_name}}-hn_fabric-testbed_net_interm.cer:/etc/nginx/root_CA_cert_plus_intermediates_file
                        - /etc/pki/tls/private/{{hank_name}}-hn_fabric-testbed_net.key:/etc/nginx/key_file
                depends_on:
                        - prometheus_service
                        - thanos-querier_service
{% if 'grafana' in fab_components %}
                        - grafana_service
{% endif %}

# Docker Monitor
        docker-monitor_service:
                image: prometheusnet/docker_exporter
                volumes:
                        - /var/run/docker.sock:/var/run/docker.sock

# SNMP Exporter
        snmp-exporter_service:
                image: prom/snmp-exporter
                command: --config.file="/etc/snmp/snmp.yml"
                volumes:
                        # Add generated snmp.yml file. 
                        # See https://github.com/prometheus/snmp_exporter/tree/master/generator for generation details.
                        - {{ base_install_dir }}/snmp/config/snmp.yml:/etc/snmp/snmp.yml
                        #- ./snmp/config/snmp.yml:/etc/snmp/snmp.yml

# Blackbox Exporter
{% if 'blackbox' in fab_components %}
        blackbox-exporter_service:
                image: prom/blackbox-exporter
                volumes:
                        # config files
                        - {{ base_install_dir }}/blackbox/config/:/config
                command:
                        - '--config.file=/config/blackbox.yml'
                #ports:
                #        - 9115:9115
                restart: always
{% endif %}